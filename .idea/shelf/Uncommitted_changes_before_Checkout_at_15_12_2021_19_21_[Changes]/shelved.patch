Index: src/test/java/Tests/xPathSelectors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Tests;\r\n\r\npublic class xPathSelectors {\r\n\r\n    //1.\r\n    private static String absolutePath = \"/html/body/div\";\r\n\r\n    //2. Все элементы на странице начиная с html-тэга\r\n    private static String allElementsInHTMLPath = \"//*\";\r\n\r\n    //3. Элемент по тэгу\r\n    private static String bodyPath = \"//body\";\r\n\r\n    //4. Дочерний элемент относительно родителя\r\n    private static String childPath = \"//form/input\";\r\n\r\n    //5. Поиск элемента с аттрибутом и его значением\r\n    private static String tagWithAttrPath = \"//span[@id='access--1']\";\r\n\r\n    //6. Поиск родителя у элемента с аттрибутом и его значением\r\n    private static String parentPath1 = \"//span[@id='access--1']/..\";\r\n    private static String parentPath2 = \"//*[@id='suite_mode_single']/parent::label\";\r\n\r\n    //7. Поиск элемента по индексу\r\n    private static String elementByIndexPath = \"(//form)[4]\";\r\n\r\n    //8. Поиск элемента по полному соответствию по тексту\r\n    private static String searchByTextPath = \"//*[text() = 'New Widget']\";\r\n    private static String searchByTextPath1 = \"//*[. = 'New Widget']\";\r\n\r\n    //9. Поиск элемента по подстроке в тексте\r\n    private static String searchBySubstringPath = \"//*[contains(text(),'Widget')]\";\r\n\r\n    //10. Поиск элемента по аттрибуту значение которого начинается с\r\n    private static String searchByStartsWithPath = \"//input[starts-with(@type, 'hi')]\";\r\n\r\n    //11. Использование логического оператора\r\n    private static String searchByTwoAttrPath = \"//*[@class=\\\"form-control \\\" and @type='text']\";\r\n\r\n    //12. Использование логического оператора\r\n    private static String searchBySpecificAttrPath = \"//input[@type != 'hidden']\";\r\n\r\n\r\n    //Axes-оси\r\n    //13. Использование ancestor - все предки текущего узла\r\n    private static String path1 = \"//*[@id='suite_mode_single_baseline']/ancestor::div\";\r\n\r\n    //14. Использование child - все предки текущего узла зависят от уровня\r\n    private static String path2_1 = \"//ul/child::li\";\r\n    private static String path2_2 = \"//ul/li\";           //аналог только проще\r\n\r\n    //15. Использование descendant - все предки текущего узла не зависимо от уровня\r\n    private static String path3_1 = \"//ul/descendant::span\";\r\n    private static String path3_2 = \"//ul//span\";           //аналог только проще\r\n\r\n    //16. Использование following - Выбирает всё в документе после закрытия тэга текущего узла\r\n    private static String path4_1 = \"//label[@for='announcement']/following::form\";\r\n    private static String path4_2 = \"(//label[@for=\\\"announcement\\\"]/following::div/*[@class='checkbox'])[1]\";\r\n\r\n    //17. Использование following-sibling - Выбирает все узлы одного уровня после текущего узла\r\n    private static String path5_1 = \"//label[@for=\\\"announcement\\\"]/following-sibling::div\";\r\n\r\n     //18. Использование preceding - Выбирает все узлы, которые появляются перед текущим узлом в документе\r\n    private static String path6_1 = \"//label[@for=\\\"announcement\\\"]/preceding::div\";\r\n\r\n    //19. Использование preceding-sibling - Выбирает все узлы одного уровня до текущего узла\r\n    private static String path7_1 = \"//label[@for=\\\"announcement\\\"]/preceding-sibling::div\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/src/test/java/Tests/xPathSelectors.java b/src/test/java/Tests/xPathSelectors.java
--- a/src/test/java/Tests/xPathSelectors.java	
+++ b/src/test/java/Tests/xPathSelectors.java	
@@ -75,4 +75,7 @@
 
 
 
+
+
+
 }
